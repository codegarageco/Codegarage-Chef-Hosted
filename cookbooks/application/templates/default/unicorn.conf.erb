require 'json'

worker_processes <%= @deploy[:unicorn][:worker_processes]  %>

user "<%= @deploy[:user]%>"

working_directory_var = "<%= @deploy[:deploy_to]%>/current"
working_directory working_directory_var

before_exec_file = File.join(working_directory_var, 'config/unicorn/before_exec.rb')
before_fork_file = File.join(working_directory_var, 'config/unicorn/before_fork.rb')
after_fork_file = File.join(working_directory_var, 'config/unicorn/after_fork.rb')

listen "<%= @deploy[:deploy_to]%>/shared/sockets/unicorn.sock", :backlog => <%= @deploy[:unicorn][:backlog] || 1024 %>, :tcp_nodelay => <%= @deploy[:unicorn][:tcp_nodelay] || true %>, :tcp_nopush => <%= @deploy[:unicorn][:tcp_nopush] || false %>, :tries => <%= @deploy[:unicorn][:tries] || 5 %>, :delay => <%= @deploy[:unicorn][:delay] || 0.5 %>, :accept_filter => "<%= @deploy[:unicorn][:accept_filter] || "httpready" %>"

timeout <%= @deploy[:unicorn][:timeout] || 30 %>

pid "<%= @deploy[:deploy_to]%>/shared/pids/unicorn.pid"

stderr_path "<%= @deploy[:deploy_to]%>/shared/log/unicorn.stderr.log"
stdout_path "<%= @deploy[:deploy_to]%>/shared/log/unicorn.stdout.log"

preload_app <%= @deploy[:unicorn][:preload_app] || true %>
GC.copy_on_write_friendly = true if GC.respond_to?(:copy_on_write_friendly=)

# ensure Unicorn doesn't use a stale Gemfile when restarting
# more info: https://willj.net/2011/08/02/fixing-the-gemfile-not-found-bundlergemfilenotfound-error/
before_exec do |server|
  # reload ENV
  json = (JSON.parse(File.read("<%= @deploy[:deploy_to]%>/shared/config/environment.json")) rescue {}).each { |k, v| ENV[k] = v }

  load before_exec_file if File.file?(before_exec_file)

  ENV['BUNDLE_GEMFILE'] = "<%= @deploy[:deploy_to]%>/current/Gemfile"
end

before_fork do |server, worker|
  if File.file?(before_fork_file)
    load before_fork_file
  else
    # the following is highly recomended for Rails + "preload_app true"
    # as there's no need for the master process to hold a connection
    if defined?(ActiveRecord::Base)
      ActiveRecord::Base.connection.disconnect!
    end
  end

  # Before forking, kill the master process that belongs to the .oldbin PID.
  # This enables 0 downtime deploys.
  old_pid = "<%= @deploy[:deploy_to]%>/shared/pids/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|
  if File.file?(after_fork_file)
    load after_fork_file
  else
    # the following is *required* for Rails + "preload_app true",
    if defined?(ActiveRecord::Base)
      ActiveRecord::Base.establish_connection
    end

    # if preload_app is true, then you may also want to check and
    # restart any other shared sockets/descriptors such as Memcached,
    # and Redis.  TokyoCabinet file handles are safe to reuse
    # between any number of forked children (assuming your kernel
    # correctly implements pread()/pwrite() system calls)
  end
end
